****
一、JSP概述
	1、JSP:Java Server Pages(运行在服务器端的页面)。就是Servlet。
	学习JSP学好的关键：时刻联想到Servlet即可。
	2、JSP的原理
		JSP会被Tomcat翻译成一个Servlet。该Servlet在Tomcat\work\catalina\locahot\day09\....

	   IE浏览器访问JSP页面时，Web服务器是如何调用并执行一个jsp页面的？Web服务器会将JSP页面翻译成一个servlet，并通过jdk来将源代码进行编译，从而能够进行访问。

	   为什么第一次访问JSP页面时会很慢？而第二次再访问时就会很快？因为第一次访问JSP页面时，服务器会将JSP页面翻译成servlet，并且要编译执行，还要实例化servlet对象(包括初始化等)。

	   Web服务器在执行jsp页面时，是如何把Jsp页面中的html排版标签发送到客户端的？服务器会通过字符输出流将html排版标签以字符串的形式输出打印给客户端

	   Jsp页面中的java代码服务器是如何执行的？Jsp页面中的java代码会被服务器原封不动的放到对应的servlet的service方法中，当运行到代码时自然就会被执行

	   Web服务器在调用jsp时，会给jsp提供一些什么java对象？有一些内置的对象，比如：out变量

	3、JSP、Servlet开发的最佳实践：
		Servlet：一般作为控制组件，处理业务逻辑
		JSP：一般作为显示组件，显示数据
		
二、JSP的语法
	1、JSP的模板元素：(先写HTML)
			就是JSP中的那些HTML标记
			作用：页面布局和美化

	2、JSP的Java脚本表达式：
			作用：输出数据到页面上
			语法：<%=表达式%>(实际上就是调用输出流打印到页面上)
			原理：JSP引擎在翻译脚本表达式时，会将程序数据转成字符串，然后在相应位置用out.print(…) 将数据输给客户端

	3、JSP中的Java脚本片段：(实际开发中，应做到JSP中不能出现一行Java脚本片段)
			作用：书写Java代码逻辑
			语法：<%
					语句1;
					语句2;
				  %>
			原理：其中的语句会原封不动的被服务器翻译到对应的Servlet的service方法中。

	4、JSP的声明：（了解其原理）
			作用：定义类的成员
			语法：<%!
				你的Java代码
				%>
			原理：声明中的java代码会被翻译到_jspService方法的外面

	5、JSP的注释：
			作用：注释Java脚本代码
			语法：<%--这是注释--%>
			<!--  -->这是HTML的注释，也能注释，但是与JSP的注释不同，JSP的注释中包含的java片段根本不会执行，但是HTML的注释中包含的java片段会被执行，只是没有显示到页面中而已
			
三、JSP的指令:给JSP引擎用的（服务器用的）
		基本的语法格式：<%@ 指令名称 属性1="值1" 属性2="值2" ....%>
		作用：告诉服务器，该如何处理JSP中除了指令之外的内容的。
		
	3.1page
		作用：定义JSP页面的各种属性
		属性：
			language:指示JSP页面中使用脚本语言。默认值java，目前只支持java。
			extends：指示JSP对应的Servlet类的父类。不要修改。
			*import：导入JSP中的Java脚本使用到的类或包。（如同Java中的import语句）
					JSP引擎自动导入以下包中的类：
						javax.servlet.*
						javax.servlet.http.*
						javax.servlet.jsp.*
					注意：一个import属性可以导入多个包，用逗号分隔。
			*session:指示JSP页面是否创建HttpSession对象。默认值是true，创建
			*buffer：指示JSP用的输出流的缓存大小.默认值是8Kb。
			autoFlush：自动刷新输出流的缓存。
			isThreadSafe：指示页面是否是线程安全的（过时的）。默认是true。
					true：不安全的。
					false：安全的。指示JSP对应的Servlet实现SingleThreadModel接口。
			*errorPage:指示当前页面出错后转向（转发）的页面。
						目标页面如果以"/"（当前应用）就是绝对路径。
						
						配置全局错误提示页面：
						web.xml
						 <error-page>
							<exception-type>java.lang.Exception</exception-type>
							<location>/error.jsp</location>
						  </error-page>
						  <error-page>
							<error-code>404</error-code>
							<location>/404.jsp</location>
						  </error-page>
			*isErrorPage:指示当前页面是否产生Exception对象。(即对应的servlet的service方法中是否有exception变量)
			*contentType：指定当前页面的MIME类型。作用与Servlet中的response.setContentType()作用完全一致
			*pageEncoding：通知引擎读取JSP时采用的编码（因为要翻译）。它还有contentType属性的作用。
			*isELIgnored:是否忽略EL表达式。${1+1}。默认值是false。
			
		page指令最简单的使用方式：<%@ page pageEncoding="UTF-8"%>
	3.2include（静态包含,开发中能用静的就不用动的,因为静的只生成一个文件，而动的会生成两个或多个文件，效率低）
		作用：包含其他的组件。
		语法：<%@include file=""%>file指定要包含的目标组件。路径如果以"/"（当前应用）就是绝对路径。
		原理：把目标组件的内容加到源组件中，输出结果。(生成的servlet只有源组件的servlet)
		
		动态包含：
			采用动作元素：<jsp:include page=""/>路径如果以"/"（当前应用）就是绝对路径。
			
		
	3.3taglib
		作用：引入外部的标签
		语法：<%@taglib uri="标签名称空间" prefix="前缀"%>
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
			
四、JSP的内置对象（9个JSP内置对象）
	JSP的内置对象引用名称			对应的类型
	
	request					HttpServletRequest
	response				HttpServletResponse
	session					HttpSession(有开关的：page指令的session属性的取值)
	application				ServletContext
	config					ServletConfig
	page					this(当前Servlet对象)
	exception				java.lang.Throwable（有开关的：page指令的isErrorPage属性改为true）
	
	out					JspWriter(JspWriter相当于一种带缓存功能的PrintWriter)
						JspWriter的缓存满了或者页面结束了，缓存中的内容会写入到response的缓存中，而调用ServletResponse.getWriter获得的PrintWriter对象写数据时也是写到response的缓存中，所以前面使用JspWriter输出的内容可能会在后面使用PrintWriter输出的内容的后面（参考ba示例），最后输出给客户端的是response的缓存中的内容
						
						在jsp页面中实现下载文件的功能时，由于页面中要使用字节流，但是会与字符流冲突而报异常，JspWriter的一个特点是虽然生成了对象，但是后面如果没使用也没关系，所以要将jsp页面中html代码及所有会用字符流输出的内容都要去掉，但是这样非常痛苦，所以在jsp页面中尽量少用字节流，下载文件功能最好还是在servlet中实现

	pageContext				javax.servlet.jsp.PageContext非常重要
		有三大作用：
		1、本身是一个域对象。同时还能操作其他三个域对象（PageContext ServletRequest HttpSession  ServletContext）
			本身表示的域范围是本页面。
				void setAttribute(String name,Object value)
				void removeAttribute(String name)
				Object getAttribute(String name)
			操作其他的三个域对象
				void setAttribute(String name,Object value,int scope)
				void removeAttribute(String name,int scope)
				Object getAttribute(String name,int scope)
				
				参数int scope是由PageContext类提供的静态变量规定的。
					PageContext.PAGE_SCOPE:页面范围（是PageContext本身中的那个Map，代号page）
					PageContext.REQUEST_SCOPE:请求范围（是ServletRequest中的那个Map，代号request）
					PageContext.SESSION_SCOPE:会话范围（是HttpSession中的那个Map，代号session）
					PageContext.APPLICATION_SCOPE:应用范围（是ServletContext中的那个Map，代号application）
								
								
			（非常有用）Object findAttribute(String name):依次按照page request session application范围搜索指定名称的对象，找到为止。
				
		2、获取其他8个隐式对象
		3、提供了转发和包含的方便方法
			RequestDispatcher rd = request.getRequestDispatcher("/url");
			rd.forward(request,response);
			
			pageContext.forward("url");
			pageContext.include("url");
						
*****五、四大域对象(两个资源之间互传数据)
	JSP中隐式对象的名称		范围名称		具体的类型
	pageContext			page			javax.servlet.jsp.PageContext
	request				request			javax.servlet.ServletRequest  （显示完数据就没有用了）
	session				session			javax.servlet.http.HttpSession (显示完数据了，过一会自己还要用)
	application			application		javax.servlet.ServletContext (显示完数据了，大家都要用。不建议使用，如果使用，必须同步处理)

六、JSP常用的动作元素
	<jsp:include/>
	<jsp:forward/>
	<jsp:param/>:在包含和转发时，利用该标签传递请求参数

七、如何调试JSP出现的错误：根据提示的行数到work目录下对应的servlet源代码中去找。当JSP中有语法问题时，会出现刷新时好时不好的情况，是因为之前成功访问过，然后有语法错误后，服务器发现错误就尝试将之前正确的页面显示出来